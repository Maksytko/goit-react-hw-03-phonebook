{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Contact/Contact.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ContactForm","props","handleFormSubmit","event","preventDefault","nameForCheck","state","name","number","setState","addToContactList","handleInputChange","currentTarget","value","onSubmit","this","className","style","label","input","type","pattern","title","required","onChange","Component","Filter","onChangeFilterInput","Contact","contact","deleteContactFromList","item","id","onClick","ContactList","contacts","list","map","App","filter","find","alert","prevState","uuidv","handleInputFilterChange","filterContactsByName","toUpperCase","includes","target","prevProps","localStorage","setItem","JSON","stringify","parse","getItem","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc181d9a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__3uv6y\",\"input\":\"ContactForm_input__20jWK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Contact_item__3e6HM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2xsbF\"};","import { Component } from \"react\";\nimport propTypes from \"prop-types\";\nimport style from \"./ContactForm.module.css\";\n\nclass ContactForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: \"\",\n      number: \"\",\n    };\n\n    this.addToContactList = props.addToContactList;\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const nameForCheck = this.state.name;\n    const number = this.state.number;\n\n    this.setState({ name: \"\", number: \"\" });\n    this.addToContactList(nameForCheck, number);\n  };\n\n  handleInputChange = (event) => {\n    if (event.currentTarget.name === \"name\") {\n      this.setState({\n        name: event.currentTarget.value,\n      });\n\n      return;\n    }\n\n    this.setState({\n      number: event.currentTarget.value,\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleFormSubmit}>\n        <label className={style.label}>\n          <span>Name</span>\n          <input\n            className={style.input}\n            type=\"text\"\n            value={this.state.name}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.handleInputChange}\n          />\n        </label>\n        <label className={style.label}>\n          <span>Number</span>\n          <input\n            className={style.input}\n            type=\"tel\"\n            value={this.state.number}\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={this.handleInputChange}\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  contacts: propTypes.arrayOf(\n    propTypes.shape({\n      name: propTypes.string,\n      number: propTypes.string,\n    })\n  ),\n  addToContactList: propTypes.func,\n};\n\nexport default ContactForm;\n","import propTypes from \"prop-types\";\n\nfunction Filter({ onChangeFilterInput }) {\n  return (\n    <div>\n      <p>Find contacts by name</p>\n      <input type=\"text\" onChange={onChangeFilterInput}></input>\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  onChangeFilterInput: propTypes.func,\n};\n\nexport default Filter;\n","import propTypes from \"prop-types\";\nimport style from \"./Contact.module.css\";\n\nfunction Contact({ contact, deleteContactFromList }) {\n  return (\n    <li className={style.item}>\n      {contact.name}: {contact.number}{\" \"}\n      <button type=\"button\" id={contact.id} onClick={deleteContactFromList}>\n        Удалить\n      </button>\n    </li>\n  );\n}\n\nContact.propTypes = {\n  contacts: propTypes.arrayOf(\n    propTypes.shape({\n      name: propTypes.string,\n      number: propTypes.string,\n    })\n  ),\n  deleteContactFromList: propTypes.func,\n};\n\nexport default Contact;\n","import Contact from \"../Contact/Contact\";\nimport propTypes from \"prop-types\";\nimport style from \"./ContactList.module.css\";\n\nfunction ContactList({ contacts, deleteContactFromList }) {\n  return (\n    <ul className={style.list}>\n      {contacts.map((contact) => {\n        return (\n          <Contact\n            contact={contact}\n            key={contact.id}\n            deleteContactFromList={deleteContactFromList}\n          />\n        );\n      })}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: propTypes.arrayOf(\n    propTypes.shape({\n      name: propTypes.string,\n      number: propTypes.string,\n    })\n  ),\n  deleteContactFromList: propTypes.func,\n};\n\nexport default ContactList;\n","import \"./App.css\";\nimport { Component } from \"react\";\nimport { v4 as uuidv } from \"uuid\";\n\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactList from \"./components/ContactList/ContactList\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  componentDidMount() {\n    this.setState({ contacts: JSON.parse(localStorage.getItem(\"contacts\")) });\n    console.log(this.state.contacts);\n  }\n\n  addToContactList = (nameForCheck, number) => {\n    if (\n      this.state.contacts.find((contact) => {\n        return contact.name === nameForCheck;\n      })\n    ) {\n      return alert(`${nameForCheck} is already in contacts!`);\n    }\n\n    return this.setState((prevState) => {\n      return {\n        contacts: [\n          ...prevState.contacts,\n          {\n            id: uuidv(),\n            name: nameForCheck,\n            number: number,\n          },\n        ],\n      };\n    });\n  };\n\n  handleInputFilterChange = (event) => {\n    this.setState({\n      filter: event.currentTarget.value,\n    });\n  };\n\n  filterContactsByName = () => {\n    return this.state.contacts.filter((contact) =>\n      contact.name.toUpperCase().includes(this.state.filter.toUpperCase())\n    );\n  };\n\n  deleteContactFromList = (event) => {\n    this.setState((prevState) => {\n      return {\n        contacts: prevState.contacts.filter(\n          (contact) => contact.id !== event.target.id\n        ),\n      };\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm\n          contacts={this.state.contacts}\n          addToContactList={this.addToContactList}\n        />\n        <h2>Contacts</h2>\n        <Filter onChangeFilterInput={this.handleInputFilterChange} />\n        <ContactList\n          contacts={this.filterContactsByName()}\n          deleteContactFromList={this.deleteContactFromList}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}